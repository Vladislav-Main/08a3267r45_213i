{"version":3,"sources":["components/selected-employees/index.js","components/selected-employees/selected-employees.js","components/sorted-selected-employees/index.js","components/sorted-selected-employees/sorted-selected-employees.js","redux/types.js","redux/actions.js","redux/employees-reducer.js","components/buttons/index.js","components/buttons/buttons.js","components/cards/index.js","components/cards/cards.js","components/sorted-letter-employees/sorted-letter-employees.js","services/fetching-service.js","components/app/App.js","redux/root-reducer.js","redux/store.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundary/index.js","components/error-boundary/error-boundary.js","index.js"],"names":["SelectedEmployees","employeesMonths","className","map","object","index","employee","length","month","emp","lastName","firstName","moment","dob","format","id","SortedSelectedEmployees","selectedEmployees","useSelector","state","employees","fetchedEmployees","filter","v","selected","sortedEmployees","sort","a","b","FETCH_EMPLOYEES_REQUEST","FETCH_EMPLOYEES_SUCCESS","FETCH_EMPLOYEES_FAILURE","EMPLOYEE_SET_SELECTED","fetchEmployees","type","payload","setSelected","employeesId","status","initialState","loading","error","employeesReducer","action","empId","empIndex","findIndex","items","item","localStorage","setItem","join","Buttons","dispatch","useDispatch","tabIndex","name","value","checked","onChange","htmlFor","Cards","employeesLetters","letter","style","color","SortedLetterEmployees","toUpperCase","charAt","FetchedEmployees","useEffect","axios","get","json","data","ids","getItem","idsAsArray","split","includes","App","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ErrorIndicator","ErrorBoundary","hasError","this","setState","props","children","Component","app","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9c82da8.chunk.js","sourcesContent":["import SelectedEmployees from './selected-employees';\r\n\r\nexport default SelectedEmployees;\r\n","import moment from 'moment';\r\nimport React from 'react';\r\n\r\nconst SelectedEmployees = ({ employeesMonths }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      {employeesMonths.map((object, index) => {\r\n        if (object.employee.length > 0) {\r\n          return (\r\n            <div key={index} className=\"selectedCards\">\r\n              <div className=\"month\">{object.month}</div>\r\n              <div className=\"selectedEmp\">\r\n                {object.employee.map((emp) => {\r\n                  return (\r\n                    <div className=\"container\" key={emp.id}>\r\n                      <ul className=\"selectedEmployees\">\r\n                        <li className=\"selectedEmployee\">\r\n                          <span className=\"selectedName\">\r\n                            {emp.lastName + ' ' + emp.firstName} -{' '}\r\n                          </span>\r\n                          <span className=\"selectedDoB\">\r\n                            {`${moment(emp.dob).format('DD')}\r\n                              \r\n                              ${moment(emp.dob).format('MMMM')}, ${moment(\r\n                              emp.dob\r\n                            ).format('YYYY')} year`}\r\n                          </span>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedEmployees;\r\n","import SortedSelectedEmployees from './sorted-selected-employees';\r\n\r\nexport default SortedSelectedEmployees;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SelectedEmployees from '../selected-employees';\r\n\r\nconst SortedSelectedEmployees = () => {\r\n  const months = [\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n  ];\r\n\r\n  const fetchedEmployees = useSelector(\r\n    (state) => state.employees.fetchedEmployees\r\n  );\r\n\r\n  let selectedEmployees = fetchedEmployees.filter((v) => v.selected);\r\n\r\n  if (selectedEmployees.length === 0) {\r\n    return <div className=\"selectedCards\">Employees List is empty</div>;\r\n  } else {\r\n    const sortedEmployees = selectedEmployees.sort((a, b) => {\r\n      if (a.lastName > b.lastName) {\r\n        return 1;\r\n      }\r\n      if (a.lastName < b.lastName) return -1;\r\n      return 0;\r\n    });\r\n\r\n    const employeesMonths = months.map((month) => {\r\n      return {\r\n        month: month,\r\n        employee: sortedEmployees.filter((employee) => {\r\n          return moment(employee.dob).format('MMMM') === month;\r\n        }),\r\n      };\r\n    });\r\n\r\n    return <SelectedEmployees employeesMonths={employeesMonths} />;\r\n  }\r\n};\r\n\r\nexport default SortedSelectedEmployees;\r\n","export const FETCH_EMPLOYEES_REQUEST = 'FETCH_EMPLOYEES_REQUEST';\r\nexport const FETCH_EMPLOYEES_SUCCESS = 'FETCH_EMPLOYEES_SUCCESS';\r\nexport const FETCH_EMPLOYEES_FAILURE = 'FETCH_EMPLOYEES_FAILURE';\r\nexport const EMPLOYEE_SET_SELECTED = 'EMPLOYEE_SET_SELECTED';\r\n","import {\r\n  FETCH_EMPLOYEES_SUCCESS,\r\n  FETCH_EMPLOYEES_REQUEST,\r\n  FETCH_EMPLOYEES_FAILURE,\r\n  EMPLOYEE_SET_SELECTED,\r\n} from './types';\r\n\r\nexport function employeesRequest() {\r\n  return { type: FETCH_EMPLOYEES_REQUEST, loading: true };\r\n}\r\n\r\nexport function fetchEmployees(employees) {\r\n  return {\r\n    type: FETCH_EMPLOYEES_SUCCESS,\r\n    payload: employees,\r\n  };\r\n}\r\n\r\nexport function employeesFailure(error) {\r\n  return { type: FETCH_EMPLOYEES_FAILURE, error };\r\n}\r\n\r\nexport function setSelected(employeesId, status) {\r\n  return {\r\n    type: EMPLOYEE_SET_SELECTED,\r\n    payload: [employeesId, status],\r\n  };\r\n}\r\n","import axios from 'axios';\r\nimport { employeesFailure, employeesRequest, fetchEmployees } from './actions';\r\n\r\nimport {\r\n  FETCH_EMPLOYEES_REQUEST,\r\n  FETCH_EMPLOYEES_SUCCESS,\r\n  FETCH_EMPLOYEES_FAILURE,\r\n  EMPLOYEE_SET_SELECTED,\r\n} from './types';\r\n\r\nconst initialState = {\r\n  fetchedEmployees: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const FetchService = () => async (dispatch) => {\r\n  try {\r\n    dispatch(employeesRequest());\r\n    const json = await axios.get(\r\n      'https://yalantis-react-school-api.yalantis.com/api/task0/users'\r\n    );\r\n    if (json?.status === 200) {\r\n      const employees = json.data\r\n        .sort((a, b) => {\r\n          if (a.lastName > b.lastName) {\r\n            return 1;\r\n          }\r\n          if (a.lastName < b.lastName) return -1;\r\n          return 0;\r\n        })\r\n        .map((v) => {\r\n          let ids = localStorage.getItem('selectedIds');\r\n          if (ids) {\r\n            let idsAsArray = ids.split(',');\r\n            v.selected = idsAsArray.includes(v.id);\r\n          }\r\n          return v;\r\n        });\r\n      dispatch(fetchEmployees(employees));\r\n    }\r\n  } catch (error) {\r\n    dispatch(employeesFailure(error));\r\n  }\r\n};\r\n\r\n// Reducers\r\nconst employeesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_EMPLOYEES_REQUEST:\r\n      return { ...state, loading: true };\r\n\r\n    case FETCH_EMPLOYEES_SUCCESS:\r\n      return { ...state, fetchedEmployees: action.payload };\r\n\r\n    case FETCH_EMPLOYEES_FAILURE:\r\n      return { ...state, error: action.payload };\r\n\r\n    case EMPLOYEE_SET_SELECTED:\r\n      const [empId, status] = action.payload;\r\n      const empIndex = state.fetchedEmployees.findIndex(\r\n        ({ id }) => id === empId\r\n      );\r\n\r\n      const items = [...state.fetchedEmployees];\r\n      const item = { ...items[empIndex] };\r\n      item.selected = status;\r\n      items[empIndex] = item;\r\n      localStorage.setItem(\r\n        'selectedIds',\r\n        items\r\n          .filter((v) => v.selected)\r\n          .map((v) => v.id)\r\n          .join(',')\r\n      );\r\n\r\n      return {\r\n        fetchedEmployees: [...items],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default employeesReducer;\r\n","import Buttons from './buttons';\r\n\r\nexport default Buttons;\r\n","import { useDispatch } from 'react-redux';\r\nimport { setSelected } from '../../redux/actions';\r\n\r\nconst Buttons = ({ employee }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div key=\"buttons\">\r\n      <p className=\"button\">\r\n        <input\r\n          tabIndex=\"selector\"\r\n          type=\"radio\"\r\n          name={employee.id}\r\n          value=\"not active\"\r\n          checked={!employee.selected}\r\n          onChange={() => {\r\n            dispatch(setSelected(employee.id, false));\r\n          }}\r\n        />\r\n        <label htmlFor=\"not active\"> not active</label>\r\n      </p>\r\n      <p className=\"button\">\r\n        <input\r\n          tabIndex=\"selector\"\r\n          type=\"radio\"\r\n          name={employee.id}\r\n          value=\"active\"\r\n          checked={employee.selected}\r\n          onChange={() => {\r\n            dispatch(setSelected(employee.id, true));\r\n          }}\r\n        />\r\n        <label htmlFor=\"active\"> active</label>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import Cards from './cards';\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport Buttons from '../buttons';\r\n\r\nconst Cards = ({ employeesLetters }) => {\r\n  return (\r\n    <div className=\"fetchedEmp\">\r\n      {employeesLetters.map((object, index) => {\r\n        return object.employees.length > 0 ? (\r\n          <div key={index} className=\"letter\">\r\n            {object.letter}\r\n\r\n            <div>\r\n              {object.employees.map((employee) => {\r\n                return (\r\n                  <div key={employee.id} className=\"content\">\r\n                    <p\r\n                      className=\"names\"\r\n                      style={{ color: employee.selected ? 'blue' : 'black' }}\r\n                    >\r\n                      {employee.lastName + ' ' + employee.firstName}\r\n                    </p>\r\n                    <Buttons employee={employee} />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div key={index} className=\"letter\">\r\n            {object.letter}\r\n            <div className=\"content\">----</div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport Cards from '../cards';\r\n\r\nconst SortedLetterEmployees = ({ fetchedEmployees }) => {\r\n  const alphabet = [\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n  ];\r\n  let employeesLetters = alphabet.map((letter) => {\r\n    return {\r\n      letter: letter,\r\n      employees: fetchedEmployees.filter((emp) => {\r\n        return emp.lastName.toUpperCase().charAt(0) === letter;\r\n      }),\r\n    };\r\n  });\r\n\r\n  return <Cards employeesLetters={employeesLetters} />;\r\n};\r\n\r\nexport default SortedLetterEmployees;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FetchService } from '../redux/employees-reducer';\r\nimport SortedLetterEmployees from '../components/sorted-letter-employees/sorted-letter-employees';\r\n\r\nfunction FetchedEmployees() {\r\n  const dispatch = useDispatch();\r\n  const { fetchedEmployees } = useSelector((state) => ({\r\n    fetchedEmployees: state.employees.fetchedEmployees,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    dispatch(FetchService());\r\n  }, [dispatch]);\r\n\r\n  return <SortedLetterEmployees fetchedEmployees={fetchedEmployees} />;\r\n}\r\n\r\nexport default FetchedEmployees;\r\n","import SortedSelectedEmployees from '../sorted-selected-employees';\nimport FetchedEmployees from '../../services/fetching-service';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"employees\">\n        <h2>Employees</h2>\n        <div className=\"mainContent selected\">\n          <FetchedEmployees />\n        </div>\n      </div>\n\n      <div className=\"employees\">\n        <h2>Employees birthday</h2>\n        <hr />\n        <div className=\"mainContent\">\n          <SortedSelectedEmployees />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n\r\nimport employeesReducer from './employees-reducer';\r\n\r\nconst rootReducer = combineReducers({ employees: employeesReducer });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from '../redux/root-reducer';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\n// import './error-indicator.css';\r\n\r\nconst ErrorIndicator = () => {\r\n  return <div>Something has gone wrong</div>;\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","import ErrorBoundary from './error-boundary';\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorIndicator />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport App from './components/app/App';\nimport store from './redux/store';\nimport ErrorBoundary from './components/error-boundary';\n\nconst app = (\n  <Provider store={store}>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </Provider>\n);\n\nrender(app, document.getElementById('root'));\n"],"sourceRoot":""}